---
title: "Simulation study"
format: 
  gfm:
    toc: true
    fig-format: png
    fig-dpi: 300
execute:
  echo: false
  warning: false
  out-width: "100%"
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk:
    fig.path: "figures/"
---

```{r}
#| label: setup
#| warning: false 


source(here::here("packages.R"))
library(Cairo)
invisible(lapply(list.files(here::here("R"), full.names = TRUE), source))
cols <- c("#CABEE9", "#7C7189", "#FAE093", "#D04E59", "#BC8E7D", "#2F3D70")
set.seed(895989)

# Set global ggplot settings
theme_set( # set base size to 14 instead of 16
  theme_light(base_size = 16, base_family = "Roboto Condensed") +
    theme(
      strip.background = element_rect(fill = cols[2], colour = "white"),
      strip.text = element_text(colour = 'white')
    )
)

# Global labels for facets
all_labels <- labeller(
  prob_space = c("0.15" = "p = 0.15", "0.65" = "p = 0.65"),
  censoring_type = c(
    "admin" = "Admin. censoring",
    "exponential" = "Random censoring",
    "none" = "No censoring"
  ),
  failure_time_model = c(
    "correct_FG" = "Correctly specified FG", 
    "misspec_FG" = "Misspecified FG"
  )
)

# Read targets objects
tar_load(coefs_main, store = here::here("_targets"))
tar_load(true_cuminc_all, store = here::here("_targets"))
tar_load(pooled_preds_main, store = here::here("_targets"))

# Add decent labels for the methods
method_labs <- c(
  "full" = "Full",
  "CCA" = "CCA",
  "smcfcs_comp" = "CS-SMC",
  "mice_comp" = "CS-Approx",
  "smcfcs_finegray" = "FG-SMC",
  "mice_subdist" = "FG-Approx"
)
coefs_main[, ':=' (
  method = factor(method, levels = names(method_labs), labels = method_labs),
  censoring_type = factor(censoring_type, levels = c("none", "exponential", "admin"))
)]
pooled_preds_main[, ':=' (
  method = factor(method, levels = names(method_labs), labels = method_labs),
  censoring_type = factor(censoring_type, levels = c("none", "exponential", "admin"))
)]
```

## Scenarios set-up

```{r}
#| label: scenarios-vis
#| fig-height: 9
#| fig-width: 13

# For these plots it is prettier to have a finer range of timepoints
# (otherwise we would just re-use true_cuminc_all target)
times <- c(seq(0.001, 2.5, length.out = 400), seq(2.6, 10, length.out = 100))
scenarios <- expand.grid(
  mechanism = c("correct_FG", "misspec_FG"),
  p = c(0.15, 0.65),
  stringsAsFactors = FALSE
)
newdat <- data.frame(X = c(0, 1), Z = c(0, 0))

# Get the true values
dat_true <- mapply(
  function(mechanism, p) {
    params_slug <- switch(
      mechanism,
      "misspec_FG" = paste0("params_weibull_lfps_", p),
      "correct_FG" = paste0("true_params_correct_FG_", p)
    )
    params <- do.call(
      targets::tar_read, 
      list(name = as.symbol(params_slug), store = here::here("_targets"))
    ) 
    compute_true(
      t = times,
      newdat = newdat,
      params = params,
      model_type = mechanism
    ) |> cbind(prob_space = p, failure_time_model = mechanism)
  },
  mechanism = scenarios$mechanism,
  p = scenarios$p,
  SIMPLIFY = FALSE,
  USE.NAMES = FALSE
) |> rbindlist()

# Start plots
dat_p1 <- dat_true[X == 0 & Z == 0] |>
  melt(
    variable.name = "hazard_type",
    value.name = "hazard",
    measure.vars = c("subdist_haz", "cs_haz")
  )

p1 <- dat_p1[!(hazard_type == "subdist_haz" & cause == 2)] |>
  ggplot(aes(time, hazard)) +
  geom_line(
    aes(
      group = interaction(hazard_type, cause),
      col = interaction(hazard_type, cause),
      linetype = interaction(hazard_type, cause)
    ),
    linewidth = 1.5, alpha = 0.8
  ) +
  facet_wrap(prob_space * failure_time_model ~ ., ncol = 4, labeller = all_labels) +
  scale_color_manual(
    breaks = c("cs_haz.1", "cs_haz.2", "subdist_haz.1"),
    values = cols[c(1, 2, 5)],
    labels = c("Cause-spec cause 1", "Cause-spec cause 2", "Subdist. cause 1")
  ) +
  scale_linetype_manual(
    breaks = c("cs_haz.1", "cs_haz.2", "subdist_haz.1"),
    values = 1:3,
    labels = c("Cause-spec cause 1", "Cause-spec cause 2", "Subdist. cause 1")
  ) +
  coord_cartesian(ylim = c(0, 2)) +
  labs(
    y = "Baseline hazards",
    x = "Time",
    linetype = NULL,
    col = NULL
  ) +
  theme(plot.margin = margin(t = 0, r = 0, b = 2.5, l = 0))

p2 <- dat_true[X == 0 & Z == 0] |>
  ggplot(aes(time, cuminc)) +
  geom_line(
    aes(group = cause, col = cause, linetype = cause),
    linewidth = 1.5, alpha = 0.8
  ) +
  facet_wrap(prob_space * failure_time_model ~ ., ncol = 4) +
  scale_color_manual(values = cols[c(1, 2)], labels = c("Cause 1", "Cause 2")) +
  scale_linetype_manual(values = 1:2, labels = c("Cause 1", "Cause 2")) +
  coord_cartesian(ylim = c(0, 1)) +
  theme(
    strip.background = element_blank(), 
    strip.text.x = element_blank(),
    plot.margin = margin(t = 2.5, r = 0, b = 2.5, l = 0)
  ) +
  labs(
    y = "Baseline cumulative incidence",
    x = "Time",
    linetype = NULL,
    col = NULL
  )

# Lower panel
dat_p3 <- dat_true[, .(
  HR_cs = cs_haz[X == 1] / cs_haz[X == 0],
  #HR_subdist = log(1 - cuminc[X == 1]) / log(1 - cuminc[X == 0])
  HR_subdist = subdist_haz[X == 1] / subdist_haz[X == 0]
  # Use Grambauer eq. (7) instead?
), by = c("time", "cause", "prob_space", "failure_time_model")] |>
  melt(
    variable.name = "HR_type",
    value.name = "HR",
    measure.vars = c("HR_cs", "HR_subdist")
  )

p3 <- dat_p3[!(HR_type == "HR_subdist" & cause == 2)]|>
  ggplot(aes(time, log(HR))) +
  geom_line(
    aes(
      group = interaction(HR_type, cause),
      col = interaction(HR_type, cause),
      linetype = interaction(HR_type, cause)
    ),
    linewidth = 1.5,
    alpha = 0.8
  ) +
  facet_wrap(prob_space * failure_time_model ~ ., ncol = 4) +
  scale_color_manual(
    breaks = c("HR_cs.1", "HR_cs.2", "HR_subdist.1"),
    values = cols[c(1, 2, 5)],
    labels = c("Cause-spec cause 1", "Cause-spec cause 2", "Subdist. cause 1")
  ) +
  scale_linetype_manual(
    breaks = c("HR_cs.1", "HR_cs.2", "HR_subdist.1"),
    values = 1:3,
    labels = c("Cause-spec cause 1", "Cause-spec cause 2", "Subdist. cause 1")
  ) +
  geom_hline(yintercept = 0, col = "black", linetype = "dotted") +
  theme(
    strip.background = element_blank(), 
    strip.text.x = element_blank(),
    plot.margin = margin(t = 2.5, r = 0, b = 0, l = 0)
  ) +
  labs(
    y = "Log hazard ratio X = 1 vs X = 0",
    x = "Time",
    linetype = NULL,
    col = NULL
  )

p1 / p2 / p3

ggsave(
  plot = p1 / p2 / p3,
  here::here("analysis/figures/scenarios_vis.pdf"), 
  dpi = 300,
  width = 13,
  height = 9,
  device = cairo_pdf
)
```

## Log subdistribution hazard ratios

```{r}
#| label: sim-summ-coefs
#| fig-height: 10
#| fig-width: 7
sim_summ <- rsimsum::multisimsum(
  data = coefs_main,
  par = "term",
  estvarname = "estimate",
  se = "std.error",
  true = "true",
  methodvar = "method",
  ref = "Full",
  ci.limits = c("conf.low", "conf.high"),
  x = TRUE,
  by = c("censoring_type", "failure_time_model", "prob_space")
)

# For shading
coefs_main[, relbias := 100 * (estimate - true) / true]
coefs_main[, dens := approxfun(density(relbias))(relbias), by = c(
  "method",
  "term",
  "censoring_type",
  "failure_time_model",
  "prob_space"
)]

# Some early processing of MC CIs
crit <- qnorm((1 - 0.95) / 2, lower.tail = FALSE)
dodge_w <- 0.75

df_summ <- data.table(sim_summ$summ)
```

### Relative bias

::: {.panel-tabset}

```{r}
#| label: rel-bias-plots
#| fig-height: 12
#| fig-width: 9
#| output: asis

covars <- c("X", "Z")

for (i in seq_along(covars)) {
  
  cat("\n")
  cat("#### ", covars[i], "\n")
  
  p <- coefs_main[term == covars[i] & method != "Full"] |>
    ggplot(aes(method, relbias)) +
    geom_jitter(
      aes(col = method, alpha = dens),
      size = 2.5,
      width = 0.25,
      shape = 16
    ) +
    scale_alpha_continuous(range = c(0.1, 0.75)) +
    facet_grid(
      failure_time_model * censoring_type ~ prob_space,
      labeller = all_labels
    ) +
    coord_flip() +
    theme(
      axis.text.x = element_text(angle = 90, hjust = 1),
      legend.position = "none",
      plot.margin = margin(0, 0, 0, 0)
    ) +
    scale_y_continuous(minor_breaks = NULL, breaks = c(0, 10, 25, 50, 75, -10, -25, -50, -75)) +
    scale_x_discrete(limits = rev) +
    geom_hline(
      aes(yintercept = 0),
      linetype = "solid",
      linewidth = 1,
      col = cols[3],
      alpha = 1
    ) +
    stat_summary(
      fun = function(x) mean(x),
      fun.min = function(x) mean(x) - crit * (sd(x) / sqrt(length(x))),
      fun.max = function(x) mean(x) + crit * (sd(x) / sqrt(length(x))),
      geom = "crossbar",
      alpha = 0.5,
      fill = "black",
      fatten = 1,
      linewidth = 0.25
    ) +
    scale_color_manual(values = cols[c(1, 2, 6, 4, 5)]) +
    labs(x = "Method", y = "100 * (Estimate - True) / True (%)")
  
  print(p)
  
  if (covars[i] == "X") {
    ggsave(
      plot = p,
      filename = here::here("analysis/figures/bias_X.pdf"),
      width = 7,
      scale = 1.25,
      height = 10,
      device = cairo_pdf
    )
  }
  
  cat("\n")
}
```

:::

### Standards errors/coverage

::: {.panel-tabset}

```{r}
#| label: std-error-plots
#| fig-height: 12
#| fig-width: 9
#| output: asis

df_summ_var <- df_summ[stat %in% c("modelse", "empse", "cover") & method != "Full"]
df_summ_var[, stat := factor(
  stat, 
  levels = c("empse", "modelse", "cover"),
  labels = c("Emp. SE", "Mod. SE", "Coverage")
)]
df_summ_var[, stat_lab := paste0(
  "bold('", stat, ":')~",
  round(est, 3), "~(", round(mcse, 3), ")"
)]

for (i in seq_along(covars)) {
  
  cat("\n")
  cat("#### ", covars[i], "\n")
  
  lab_y <- ifelse(covars[i] == "X", 0.205, 0.125)
  lims <- if (covars[i] == "X") c(0.05, 0.31) else c(0, 0.2)
  
  p <- df_summ_var[stat %in% c("Emp. SE", "Mod. SE") & term == covars[i]] |>
    ggplot(aes(method, est, col = method)) +
    geom_text(
      data = df_summ_var[stat == "Coverage" & term == covars[i]],
      aes(label = stat_lab, y = lab_y),
      hjust = 0,
      parse = TRUE,
      family = "Roboto Condensed",
      size = 3
    ) +
    geom_linerange(
      aes(xmin = method, xmax = method, ymin = 0, ymax = est, linetype = stat),
      position = position_dodge(width = dodge_w),
      linewidth = 0.5
    ) +
    geom_point(
      size = 2,
      aes(shape = stat),
      position = position_dodge(width = dodge_w)
    ) +
    geom_point(
      aes(y = est + crit * mcse, group = stat),
      shape = 41,
      size = 1.5,
      position = position_dodge(width = dodge_w)
    ) +
    geom_point(
      aes(y = est - crit * mcse, group = stat),
      shape = 40,
      size = 1.5,
      position = position_dodge(width = dodge_w)
    ) +
    scale_x_discrete(limits = rev) +
    facet_grid(
      failure_time_model * censoring_type ~ prob_space,
      labeller = all_labels
    ) +
    coord_flip(ylim = lims) +
    guides(colour = "none") +
    theme(
      legend.position = "top", 
      plot.margin = margin(t = 0, r = 0, b = 0, l = 0)
    ) +
    scale_shape_manual(
      "Standard error:",
      values = c(16, 17),
      labels = c("Empirical", "Model-based")
    ) +
    scale_linetype_manual(
      "Standard error:",
      values = c(1, 2),
      labels = c("Empirical", "Model-based")
    ) +
    scale_color_manual(values = cols[c(1, 2, 6, 4, 5)]) +
    labs(x = "Method", y = "Standard error (95% Monte-Carlo error interval)")
  
  print(p)
  
  if (covars[i] == "X") {
    ggsave(
      plot = p,
      filename = here::here("analysis/figures/perf_X.pdf"),
      width = 7,
      scale = 1.25,
      height = 10,
      device = cairo_pdf
    )
  }
  
  cat("\n")
}
```

:::

## Cumulative incidences

```{r}
#| label: sim-summ-preds

preds_df <- merge(pooled_preds_main, true_cuminc_all[cause == 1])

sim_summ_preds <- rsimsum::simsum(
  data = preds_df,
  estvarname = "pooled_pred",
  se = NULL,
  true = "cuminc",
  methodvar = "method",
  ref = "Full",
  by = c("time", "censoring_type", "failure_time_model", "prob_space", "X", "Z")
)

df_summ_pred <- data.table(sim_summ_preds$summ)[censoring_type != "admin"]
df_summ_pred[, time := as.numeric(as.character(time))]
```

### Performance

::: {.panel-tabset}

```{r}
#| label: pred-plots
#| fig-height: 15
#| fig-width: 10
#| output: asis

pats <- c("Baseline", "Higher risk")

for (i in seq_along(pats)) {
  
  cat("\n")
  cat("#### ", pats[i], "\n")
  
  expr_pat <- parse(
    text = ifelse(pats[i] == "Baseline", "X == 0 & Z == 0", "X == 1 & Z == 1")
  )
  
  p_cumincs <- df_summ_pred[stat == "thetamean" & eval(expr_pat)] |>
    ggplot(aes(time, est, group = method, col = method)) +
    geom_line(
      data = preds_df[censoring_type != "admin" & eval(expr_pat)],
      aes(y = cuminc),
      col = "black",
      linewidth = 1
    ) +
    geom_line(aes(linetype = method), linewidth = 1) +
    geom_point(aes(shape = method)) +
    facet_grid(
      prob_space * failure_time_model * censoring_type ~ .,
      labeller = all_labels,
      scales = "free"
    ) +
    scale_color_manual(values = cols[c(3, 1, 2, 6, 4, 5)]) +
    theme(
      strip.background = element_blank(), 
      strip.text = element_blank(),
      plot.margin = margin(t = 0, r = 3.5, b = 0, l = 0)
    ) +
    labs(
      col = "Method",
      linetype = "Method",
      shape = "Method",
      x = "Time",
      y = "Cumulative incidence cause 1"
    )

  p_diffs <- preds_df[, .(est = mean(pooled_pred, na.rm = TRUE)), by = c(
    "method",
    "time",
    "prob_space",
    "failure_time_model",
    "censoring_type",
    "cuminc",
    "X",
    "Z"
  )][censoring_type != "admin" & eval(expr_pat)] |>
    ggplot(aes(time, est - cuminc, group = method, col = method)) +
    geom_hline(yintercept = 0, col = "black", linewidth = 1) +
    geom_line(aes(linetype = method), linewidth = 1) +
    geom_point(aes(shape = method)) +
    facet_grid(
      prob_space * failure_time_model * censoring_type ~ .,
      labeller = all_labels,
      scales = "fixed"
    ) +
    scale_color_manual(values = cols[c(3, 1, 2, 6, 4, 5)]) +
    theme(
      strip.background = element_blank(), 
      strip.text = element_blank(),
      plot.margin = margin(t = 0, r = 3.5, b = 0, l = 3.5)
    ) +
    labs(
      col = "Method",
      linetype = "Method",
      shape = "Method",
      x = "Time",
      y = "Difference estimated - true cumulative incidence cause 1"
    )
  
  p_rmse <- df_summ_pred[stat == "mse" & eval(expr_pat)] |>
    ggplot(aes(time, sqrt(est), group = method, col = method)) +
    geom_line(aes(linetype = method), linewidth = 1) +
    geom_point(aes(shape = method)) +
    facet_grid(
      prob_space * failure_time_model * censoring_type ~ .,
      labeller = all_labels,
      scales = "fixed" # free?
    ) +
    scale_color_manual(values = cols[c(3, 1, 2, 6, 4, 5)]) +
    labs(
      col = "Method",
      linetype = "Method",
      shape = "Method",
      x = "Time",
      y = "Root mean square error (RMSE)"
    ) +
    theme(plot.margin = margin(t = 0, r = 0, b = 0, l = 3.5))
  
  comb <- p_cumincs + p_diffs + p_rmse & theme(legend.position = "top")
  p <- comb + plot_layout(guides = "collect")
  
  print(p)
  
  ggsave(
    plot = p,
    filename = here::here(paste0("analysis/figures/preds_", pats[i], ".pdf")),
    width = 7,
    scale = 1.5,
    height = 10,
    device = cairo_pdf
  )
  
  cat("\n")
}
```

:::

## Miscellaneous 

### Covariates and missing data mechanism

```{r}
#| label: miss-mech-plot
#| out-width: "100%"
#| fig-height: 7
dat_missmech <- generate_dataset(
  n = 2000,
  args_event_times = list(
    mechanism = "correct_FG",
    params = tar_read(true_params_correct_FG_0.15, store = here::here("_targets")),
    censoring_type = "none"
  ),
  args_missingness = list(
    mech_params = list("prob_missing" = 0.4, "mechanism_expr" = "1.5 * Z")
  )
)

dat_missmech[, prob_miss_X := plogis(1.5 * Z)]

p_jitt <- dat_missmech |> 
  ggplot(aes(Z, X_obs, col = prob_miss_X)) +
  geom_jitter(aes(shape = factor(X_missind)), height = 0.25, alpha = 0.35, size = 2.5) +
  scale_color_viridis_c(direction = -1) +
  scale_shape_manual("X missing", values = c(16, 17), labels = c("No", "Yes")) +
  labs(y = "X", col = "Probability\nX missing")

p_logis <- dat_missmech |> 
  ggplot(aes(Z, plogis(1.5 * Z))) +
  geom_line(linewidth = 2, col = cols[6]) +
  labs(y = "Probability of X missing")

p_logis / p_jitt  
```

### Censoring plots

```{r}
#| label: cens-imps-plot
#| fig-height: 12
#| fig-width: 9

set.seed(7865185) # for slightly nicer looking replication
params <- tar_read(true_params_correct_FG_0.65, store = here::here("_targets"))

dat <- generate_dataset(
  n = 2e3,
  list(
    mechanism = "correct_FG",
    params = params,
    censoring_type = "exponential",
    censoring_params = list("exponential" = "0.49")
  ),
  list(mech_params = list("prob_missing" = 0, "mechanism_expr" = "1"))
)

cens_imps <- kmi(
  formula = Surv(time, D != 0) ~ 1, 
  data = data.frame(dat),
  etype = D,
  failcode = 1,
  nimp = 10, # 30?
  bootstrap = FALSE
)

imp_dats_cens <- lapply(cens_imps$imputed.data, function(imp_dat) {
  cbind.data.frame(cens_imps$original.data, imp_dat)
}) |> rbindlist(idcol = ".imp")

# More efficient for plotting later.. uhm actually not!
# imp_dats_cens[,  .(
#   cumhaz = list({
#     basehaz(
#       coxph(Surv(newtimes, newevent == 1) ~ 1, data = .SD), 
#       centered = FALSE
#     )
#   })
# ), by = ".imp"][, unlist(cumhaz, recursive = FALSE), by = .imp]

imp_dats_cens[, H1_subdist := compute_marginal_cumhaz(
  timevar = newtimes,
  statusvar = newevent,
  cause = 1,
  type = "cause_spec"
), by = .imp]

imp_dats_cens[, .imp := factor(.imp)]

dat[, "V_true" := (D == 1) * time + (D != 1) * cens_time]

dat[, H1_subdist_true := compute_marginal_cumhaz(
  timevar = V_true,
  statusvar = D,
  cause = 1,
  type = "cause_spec"
)]

id_samps <- sample(dat[D == 2]$id, size = 20, replace = FALSE)

# This we will need for the secondary axis
marg_mod <- coxph(Surv(V_true, D == 1) ~ 1, data = dat)
bhaz <- basehaz(marg_mod, centered = FALSE)
f <- Vectorize(function(x) tail(bhaz[bhaz$time <= x, ]$hazard, 1) + x * 1e-5)

# Let's get the breaks 
max_subdist_marg <- max(dat$H1_subdist_true)
t_max_subdist <- dat[order(V_true)][H1_subdist_true == max_subdist_marg, .SD[1]]$V_true

# Approx bit
breaks_time <- pmin(t_max_subdist, c(0.01, 1.25, 2.5, 3.75, 5, 10))

df_ids <- merge(imp_dats_cens, dat)[id %in% id_samps] |> 
  melt(
    measure.vars = c("time", "newtimes", "V_true"),
    variable.name = "time_var",
    value.name = "value"
  ) 

p_ids <- df_ids[, c("id", "time_var", "value")] |> 
  unique() |> 
  ggplot(aes(as.numeric(factor(id)), value, group = id)) +
  geom_line(col = "#CABEE9") +
  geom_point(aes(col = time_var, shape = time_var, size = time_var), alpha = 0.75) +
  scale_size_manual(
    "Timepoint",
    values = c(3, 2, 3),
    labels = c("T (cause 2)", "V (imputed)", "V (true)") 
  ) +
  scale_colour_manual(
    "Timepoint",
    values = c("#D04E59", "#CABEE9", "#2F3D70"),
    labels = c("T (cause 2)", "V (imputed)", "V (true)") 
  ) +
  scale_shape_manual(
    "Timepoint",
    values = c(17, 16, 16),
    labels = c("T (cause 2)", "V (imputed)", "V (true)") 
  ) +
  coord_flip(ylim = c(0, 10)) + 
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.text.align = 0
  ) +
  labs(y = "Time", x = "Individual ID") +
  scale_y_continuous(
    sec.axis = sec_axis(
      trans = ~ f(.), 
      breaks = f(breaks_time),
      labels = round(f(breaks_time), 3),
      name = "Cumulative (marginal) subdistribution hazard at timepoint"
    )
  ) +
  geom_hline(yintercept = min(bhaz$time), linetype = "dotted")

# Plot from t = 1.25 to avoid graphical overlap issue
p_subdists <- imp_dats_cens[, .SD[!duplicated(newtimes)], by = .imp][newtimes > 1.25] |>
  ggplot(aes(newtimes, H1_subdist)) +
  geom_step(aes(group = .imp), col = "gray", linewidth = 0.25) +
  coord_cartesian(xlim = c(0, 10)) + #, ylim = c(0, 2)) +
  # Add the weighted one
  geom_step(
    data = dat[V_true <= max(imp_dats_cens[D == 2]$newtimes)],
    aes(x = V_true, y = H1_subdist_true),
    linewidth = 1,
    col = "black",
    alpha = 0.5
  ) +
  labs(x = "Time", y = "Estimated cumulative (marginal) subdistribution hazard") +
  geom_curve(
    mapping = aes(
      x = 9,
      y = 1,
      xend = max(imp_dats_cens[D == 2]$newtimes),
      yend = max_subdist_marg
    ),
    colour = "black",
    linewidth = 0.5,
    curvature = 0.5,
    arrow = arrow(length = unit(0.025, "npc"), type = "open"),
    inherit.aes = FALSE
  ) +
  geom_curve(
    mapping = aes(
      x = 2,
      y = max_subdist_marg,
      xend = 4.725,
      yend = max_subdist_marg + 0.025
    ),
    colour = "black",
    linewidth = 0.5,
    curvature = -0.15,
    arrow = arrow(length = unit(0.025, "npc"), type = "open"),
    inherit.aes = FALSE
  ) +
  annotate(
    "text",
    x = 9,
    y = 0.95,
    hjust = 0.5,
    label = "Using true V",
    family = "Roboto Condensed"
  ) +
  annotate(
    "text",
    x = 2,
    y = max_subdist_marg,
    hjust = 1,
    label = "Using imputed V\n(m = 10 imputations)",
    family = "Roboto Condensed"
  )

p_ids / p_subdists

# This bastard is the heavy one!
ggsave(
  filename = here::here("analysis/figures/cens_appendix.pdf"), 
  width = 9,
  height = 10,
  device = cairo_pdf
)
```


